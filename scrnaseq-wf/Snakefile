"""Ovary Single Cell Workflow."""
import sys
sys.path.insert(0, srcdir('../lcdb-wf'))
import os
from textwrap import dedent
import yaml
import tempfile
import pandas as pd
from lcdblib.snakemake import helpers, aligners
from lcdblib.utils import utils
from lib import common
from lib.patterns_targets import RNASeqConfig

configfile: 'config/config.yaml'
shell.prefix('set -euo pipefail; export TMPDIR={};'.format(common.tempdir_for_biowulf()))
shell.executable('/bin/bash')

c = RNASeqConfig(config, 'config/scrnaseq_patterns.yaml')

# ----------------------------------------------------------------------------
# RULES
# ----------------------------------------------------------------------------
final_targets = utils.flatten((
    utils.flatten(c.targets['cellranger']['bam']),
    utils.flatten(c.targets['cellranger_force']['bam']),
    utils.flatten(c.targets['parquet']),
    utils.flatten(c.targets['normalized']),
    'scripts/scrnaseq_combine_force.html',
))

rule targets:
    """
    Final targets to create
    """
    input: final_targets


rule fix_gtf:
    input:
        gtf = [c.refdict[c.organism][config['gtf']['tag']]['gtf']]
    output: '../references/dmel-all-r6.16.modFix.gtf'
    shell: """
        awk 'BEGIN{{FS="\t"}}{{
            if (!($9 ~ /FBgn0002781/ && ($7 == "+" || $7 == "."))){{print $0}}
        }}' {input} > {output[0]}
    """


rule cellranger_mkref:
    input:
        gtf = rules.fix_gtf.output,
        fasta = [c.refdict[c.organism][config['gtf']['tag']]['fasta']]
    output:
        fasta = '../references/dm6.16/fasta/genome.fa',
        gtf = '../references/dm6.16/genes/genes.gtf',
        star = '../references/dm6.16/star/SA'
    threads: 6
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 8,
        time_hr = lambda wildcards, attempt: attempt * 4
    shell:
        'module load cellranger/2.1.1 && '
        'cd ../references/ && '
        'cellranger mkref '
        '--genome=dm6.16 '
        '--fasta={input.fasta} '
        '--genes={input.gtf} '
        '--nthreads={threads} '
        '--memgb={resources.mem_gb} '


rule cellranger:
    input:
        ref = rules.cellranger_mkref.output.star,
    output: '{sample_dir}/{sample,ovary1|ovary2|ovary3}/outs/possorted_genome_bam.bam'
    threads: 16
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 25,
        time_hr = lambda wildcards, attempt: attempt * 24
    run:
        stable = c.sampletable.set_index('samplename')
        record = stable.loc[wildcards.sample, :]
        sample = record['sample']
        fname = record['orig_filename']
        cmd = (
            f'module load cellranger/2.1.1 && '
            f'cd {c.sample_dir} && '
            f'rm -rf {wildcards.sample} &&'
            f'cellranger count '
            f'--id={wildcards.sample} '
            f'--transcriptome=../../../references/dm6.16 '
            f'--fastqs={fname} '
            f'--sample={sample} '
            f'--localcores={threads} '
            f'--localmem={resources.mem_gb} '
        )
        shell(cmd)


rule cellranger_force:
    input:
        ref = rules.cellranger_mkref.output.star,
    output: '{sample_dir}/{sample,ovary1|ovary2|ovary3}_force/outs/possorted_genome_bam.bam'
    threads: 16
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 25,
        time_hr = lambda wildcards, attempt: attempt * 24
    run:
        stable = c.sampletable.set_index('samplename')
        record = stable.loc[wildcards.sample, :]
        sample = record['sample']
        fname = record['orig_filename']
        cmd = (
            f'module load cellranger/2.1.1 && '
            f'cd {c.sample_dir} && '
            f'rm -rf {wildcards.sample}_force &&'
            f'cellranger count '
            f'--id={wildcards.sample}_force '
            f'--transcriptome=../../../references/dm6.16 '
            f'--fastqs={fname} '
            f'--sample={sample} '
            f'--localcores={threads} '
            f'--localmem={resources.mem_gb} '
            f'--force-cells=3000 '
        )
        shell(cmd)


rule scrnaseq_rmarkdown:
    """
    Run and render the RMarkdown file that performs differential expression
    """
    input:
        mtx1=utils.flatten(c.targets['cellranger_force']['filtered_h5']),
        rmd='scripts/scrnaseq_combine_force.Rmd',
    output:
        html=c.targets['seurat']['html'],
        raw=c.targets['seurat']['raw'],
        norm=c.targets['seurat']['norm'],
        clusters=c.targets['seurat']['clusters'],
        metadata=c.targets['seurat']['metadata'],
        biomarkers4=c.targets['seurat']['biomarkers4'],
        biomarkers6=c.targets['seurat']['biomarkers6'],
        biomarkers1=c.targets['seurat']['biomarkers1'],
    shell:
        'Rscript -e '
        '''"rmarkdown::render('{input.rmd}', 'knitrBootstrap::bootstrap_document')"'''


ruleorder: split_clusters > tsv_to_parquet

rule tsv_to_parquet:
    input: '../output/scrnaseq-wf/scrnaseq_combine_force/{fname}.tsv'
    output: '../output/scrnaseq-wf/{fname}.parquet'
    run:
        import pandas as pd
        df = pd.read_csv(input[0], sep='\t', index_col=0)
        df.to_parquet(output[0])


rule split_clusters:
    input: c.targets['parquet']['clusters']
    output:
        res4=c.targets['parquet']['clusters4'],
        res6=c.targets['parquet']['clusters6'],
    script: 'scripts/split_clusters.py'


rule gene_lengths:
    input: '../output/bulk-wf/gene_lengths.tsv'
    output: c.patterns['parquet']['gene_lens']
    run:
        import pandas as pd
        df = pd.read_csv(input[0], sep='\t', index_col=0)
        df.to_parquet(output[0])


rule cpm:
    input: c.targets['parquet']['raw']
    output: c.targets['normalized']['cpm']
    script: 'scripts/cpm.py'


rule tpm:
    input: c.targets['parquet']['raw'], rules.gene_lengths.output
    output: c.targets['normalized']['tpm']
    script: 'scripts/tpm.py'


rule rpkm:
    input: c.targets['parquet']['raw'], rules.gene_lengths.output
    output: c.targets['normalized']['rpkm']
    script: 'scripts/rpkm.py'


rule zscore_tpm:
    input: '../output/scrnaseq-wf/{fname}.parquet'
    output: '../output/scrnaseq-wf/zscore_{fname}.parquet'
    script: 'scripts/zscore_tpm.py'


rule tpm_by_cluster:
    input:
        tpm=rules.tpm.output,
        cluster=rules.split_clusters.output.res4
    output: c.targets['normalized']['tpm_res4']
    script: 'scripts/tpm_by_cluster.py'


rule raw_by_cluster:
    input:
        raw=c.targets['parquet']['raw'],
        cluster=rules.split_clusters.output.res4
    output: c.targets['normalized']['raw_res4']
    script: 'scripts/raw_by_cluster.py'
