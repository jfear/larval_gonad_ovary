"""Ovary Single Cell Workflow."""
import sys
sys.path.insert(0, srcdir('../lcdb-wf'))
import os
from textwrap import dedent
import yaml
import tempfile
import pandas as pd
from lcdblib.snakemake import helpers, aligners
from lcdblib.utils import utils
from lib import common
from lib.patterns_targets import RNASeqConfig

configfile: 'config/config.yaml'
shell.prefix('set -euo pipefail; export TMPDIR={};'.format(common.tempdir_for_biowulf()))
shell.executable('/bin/bash')

c = RNASeqConfig(config, 'config/scrnaseq_patterns.yaml')

# ----------------------------------------------------------------------------
# RULES
# ----------------------------------------------------------------------------
final_targets = utils.flatten((
    utils.flatten(c.targets['cellranger']['bam']),
    utils.flatten(c.targets['cellranger_force']['bam']),
    utils.flatten(c.targets['cellranger_force']['agg']),
    utils.flatten(c.targets['parquet']),
    utils.flatten(c.targets['normalized']),
    'scripts/scrnaseq_combine_force.html',
    'data/scrnaseq_samples/ovary_force.csv'
))

rule targets:
    """
    Final targets to create
    """
    input: final_targets


rule fix_gtf:
    input:
        gtf = [c.refdict[c.organism][config['gtf']['tag']]['gtf']]
    output: '../references/dmel-all-r6.16.modFix.gtf'
    shell: """
        awk 'BEGIN{{FS="\t"}}{{
            if (!($9 ~ /FBgn0002781/ && ($7 == "+" || $7 == "."))){{print $0}}
        }}' {input} > {output[0]}
    """


rule cellranger_mkref:
    input:
        gtf = rules.fix_gtf.output,
        fasta = [c.refdict[c.organism][config['gtf']['tag']]['fasta']]
    output:
        fasta = '../references/dm6.16/fasta/genome.fa',
        gtf = '../references/dm6.16/genes/genes.gtf',
        star = '../references/dm6.16/star/SA'
    threads: 6
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 8,
        time_hr = lambda wildcards, attempt: attempt * 4
    shell:
        'module load cellranger/2.1.1 && '
        'cd ../references/ && '
        'cellranger mkref '
        '--genome=dm6.16 '
        '--fasta={input.fasta} '
        '--genes={input.gtf} '
        '--nthreads={threads} '
        '--memgb={resources.mem_gb} '


rule cellranger:
    input:
        ref = rules.cellranger_mkref.output.star,
    output: '{sample_dir}/{sample,ovary1|ovary2|ovary3}/outs/possorted_genome_bam.bam'
    threads: 16
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 25,
        time_hr = lambda wildcards, attempt: attempt * 24
    run:
        stable = c.sampletable.set_index('samplename')
        record = stable.loc[wildcards.sample, :]
        sample = record['sample']
        fname = record['orig_filename']
        cmd = (
            f'module load cellranger/2.1.1 && '
            f'cd {c.sample_dir} && '
            f'rm -rf {wildcards.sample} &&'
            f'cellranger count '
            f'--id={wildcards.sample} '
            f'--transcriptome=../../../references/dm6.16 '
            f'--fastqs={fname} '
            f'--sample={sample} '
            f'--localcores={threads} '
            f'--localmem={resources.mem_gb} '
        )
        shell(cmd)


rule cellranger_force:
    input:
        ref = rules.cellranger_mkref.output.star,
    output:
        bam='{sample_dir}/{sample,ovary1|ovary2|ovary3}_force/outs/possorted_genome_bam.bam',
        mol='{sample_dir}/{sample,ovary1|ovary2|ovary3}_force/outs/molecule_info.h5',
    threads: 16
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 25,
        time_hr = lambda wildcards, attempt: attempt * 24
    run:
        stable = c.sampletable.set_index('samplename')
        record = stable.loc[wildcards.sample, :]
        sample = record['sample']
        fname = record['orig_filename']
        cmd = (
            f'module load cellranger/2.1.1 && '
            f'cd {c.sample_dir} && '
            f'rm -rf {wildcards.sample}_force &&'
            f'cellranger count '
            f'--id={wildcards.sample}_force '
            f'--transcriptome=../../../references/dm6.16 '
            f'--fastqs={fname} '
            f'--sample={sample} '
            f'--localcores={threads} '
            f'--localmem={resources.mem_gb} '
            f'--force-cells=3000 '
        )
        shell(cmd)


rule cellranger_agg_csv:
    input: expand('data/scrnaseq_samples/{sample}_force/outs/molecule_info.h5', sample=['ovary1', 'ovary2', 'ovary3'])
    output: 'data/scrnaseq_samples/ovary_force.csv'
    run:
        dat = dict(library_id=['ovary1_force', 'ovary2_force', 'ovary3_force'],
                   molecule_h5=['data/scrnaseq_samples/ovary1_force/outs/molecule_info.h5',
                                'data/scrnaseq_samples/ovary2_force/outs/molecule_info.h5',
                                'data/scrnaseq_samples/ovary3_force/outs/molecule_info.h5',
                               ])

        df = pd.DataFrame(dat)
        df.to_csv(output[0], index=False)


rule cellranger_aggr:
    input: rules.cellranger_agg_csv.output[0]
    output: 'data/scrnaseq_samples/ovary_force_agg/outs/filtered_gene_bc_matrices_h5.h5'
    threads: 2
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 6,
        time_hr = lambda wildcards, attempt: attempt * 4
    shell:
        'module load cellranger/2.1.1 && '
        'cd data/scrnaseq_samples && '
        'rm -rf ovary_force_agg &&'
        'cellranger aggr '
        '--id=ovary_force_agg '
        '--csv=ovary_force.csv '
        '--normalize=mapped '
        '--localcores={threads} '
        '--localmem={resources.mem_gb} '


rule scrnaseq_rmarkdown:
    """
    Run and render the RMarkdown file that performs differential expression
    """
    input:
        mtx1=utils.flatten(c.targets['cellranger_force']['filtered_h5']),
        rmd='scripts/scrnaseq_combine_force.Rmd',
    output:
        html='scripts/scrnaseq_combine_force.html',
        raw='data/scrnaseq_combine_force/raw.tsv',
        norm='data/scrnaseq_combine_force/normalized_read_counts.tsv',
        clusters='data/scrnaseq_combine_force/clusters.tsv',
        metadata='data/scrnaseq_combine_force/metadata.tsv',
        biomarkers4='data/scrnaseq_combine_force/biomarkers_res.0.4.tsv',
        biomarkers6='data/scrnaseq_combine_force/biomarkers_res.0.6.tsv',
        biomarkers1='data/scrnaseq_combine_force/biomarkers_res.1.tsv',
    shell:
        'Rscript -e '
        '''"rmarkdown::render('{input.rmd}', 'knitrBootstrap::bootstrap_document')"'''


ruleorder: split_clusters > tsv_to_parquet

rule tsv_to_parquet:
    input: 'data/scrnaseq_combine_force/{fname}.tsv'
    output: 'data/{fname}.parquet'
    run:
        import pandas as pd
        df = pd.read_csv(input[0], sep='\t', index_col=0)
        df.to_parquet(output[0])


rule split_clusters:
    input: 'data/clusters.parquet'
    output:
        res4='data/clusters.res.0.4.parquet',
        res6='data/clusters.res.0.6.parquet',
    run:
        import pandas as pd
        df = pd.read_parquet(input[0])

        def pop(df, res):
            res = df[res]
            res.name = 'cluster'
            return res.to_frame()

        res4 = pop(df, 'res.0.4')
        res4.to_parquet(output.res4)

        res6 = pop(df, 'res.0.6')
        res6.to_parquet(output.res6)


rule gene_lengths:
    input: '../bulk-wf/data/gene_lengths.tsv'
    output: 'data/gene_lengths.parquet'
    run:
        import pandas as pd
        df = pd.read_csv(input[0], sep='\t', index_col=0)
        df.to_parquet(output[0])


rule cpm:
    input: 'data/raw.parquet'
    output: 'data/cpm.parquet'
    run:
        from larval_gonad_ovary.normalization import cpm
        raw = pd.read_parquet(input[0])
        norm = cpm(raw)
        norm.to_parquet(output[0])


rule tpm:
    input: 'data/raw.parquet', rules.gene_lengths.output
    output: 'data/tpm.parquet'
    run:
        import pandas as pd
        from larval_gonad_ovary.normalization import tpm
        raw = pd.read_parquet(input[0])
        gene_lengths = pd.read_parquet(input[1]).reindex(raw.index).gene_length
        norm = tpm(raw, gene_lengths)
        norm.to_parquet(output[0])


rule rpkm:
    input: 'data/raw.parquet', rules.gene_lengths.output
    output: 'data/rpkm.parquet'
    run:
        import pandas as pd
        from larval_gonad_ovary.normalization import rpkm
        raw = pd.read_parquet(input[0])
        gene_lengths = pd.read_parquet(input[1]).reindex(raw.index).gene_length
        norm = rpkm(raw, gene_lengths)
        norm.to_parquet(output[0])


rule zscore:
    input: 'data/{fname}.parquet'
    output: 'data/zscore_{fname}.parquet'
    run:
        import pandas as pd
        from larval_gonad_ovary.normalization import zscore
        df = pd.read_parquet(input[0])
        norm = zscore(df)
        norm.to_parquet(output[0])


rule raw_by_cluster:
    input:
        raw='data/raw.parquet',
        cluster=rules.split_clusters.output.res4
    output: 'data/raw.res.0.4.parquet'
    run:
        import pandas as pd
        raw = pd.read_parquet(input.raw)
        clusters = pd.read_parquet(input.cluster)
        raw_cluster = raw.T.join(clusters).groupby('cluster').sum().T
        raw_cluster.columns = [f'clus{x}' for x in raw_cluster.columns]
        raw_cluster.index.name = 'FBgn'
        raw_cluster.to_parquet(output[0])


rule tpm_by_cluster:
    input: rules.raw_by_cluster.output[0], rules.gene_lengths.output[0]
    output: 'data/tpm.res.0.4.parquet'
    run:
        import pandas as pd
        from larval_gonad_ovary.normalization import tpm
        raw = pd.read_parquet(input[0])
        gene_lengths = pd.read_parquet(input[1]).reindex(raw.index).gene_length
        norm = tpm(raw, gene_lengths)
        norm.to_parquet(output[0])


